name: Deploy BackEnd

on:
  push:
    branches:
      - main
    paths:
      - 'BackEnd/**'

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      EC2_HOST: ${{ secrets.EC2_HOST }}
      MYSQL_PORT: ${{ secrets.MYSQL_PORT }}
      MYSQL_USER: ${{ secrets.MYSQL_USER }}
      MYSQL_PASSWORD: ${{ secrets.MYSQL_PASSWORD }}
      KAFKA_PORT: ${{ secrets.KAFKA_PORT }}
      REDIS_HOST: ${{ secrets.REDIS_HOST }}
      REDIS_PORT: ${{ secrets.REDIS_PORT }}
      BASIC_PROFILE_URL: ${{ secrets.BASIC_PROFILE_URL }}
      EMAIL_SENDER: ${{ secrets.EMAIL_SENDER }}
    steps:
      - name: Github Repository에서 파일 불러오기
        uses: actions/checkout@v4

      - name: Github Actions에 JDK 17 세팅
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: application.yml 파일 구성
        working-directory: BackEnd
        run: echo "${{ secrets.APPLICATION_PROPERTIES }}" > ./src/main/resources/application.yml

      - name: env 파일 구성
        working-directory: BackEnd
        run: echo "${{ secrets.DEPLOY_PROPERTIES }}" > ./DeploySettings.env

      - name: 실행 권한 부여하기
        working-directory: BackEnd
        run: chmod +x gradlew

      - name: 테스트 및 빌드하기
        working-directory: BackEnd
        run: ./gradlew clean build

      - name: AWS Resource에 접근할 수 있게 AWS credentials 설정
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ap-northeast-2
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: ECR에 로그인하기
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Docker 이미지 생성
        working-directory: BackEnd
        run: docker build -t mytoyproject-server .

      - name: Docker 이미지에 Tag 붙이기
        working-directory: BackEnd
        run: docker tag mytoyproject-server ${{ steps.login-ecr.outputs.registry }}/mytoyproject-server:latest

      - name: ECR에 Docker 이미지 Push하기
        working-directory: BackEnd
        run: docker push ${{ steps.login-ecr.outputs.registry }}/mytoyproject-server:latest

      - name: 압축하기
        working-directory: BackEnd
        run: tar -czvf $GITHUB_SHA.tar.gz appspec.yml DeploySettings.env scripts

      - name: S3에 프로젝트 폴더 업로드하기
        working-directory: BackEnd
        run: aws s3 cp --region ap-northeast-2 ./$GITHUB_SHA.tar.gz s3://myproject-upload-server/$GITHUB_SHA.tar.gz

      - name: Code Deploy를 활용해 EC2에 프로젝트 코드 배포
        run: aws deploy create-deployment
          --application-name myproject-server
          --deployment-config-name CodeDeployDefault.AllAtOnce
          --deployment-group-name toyproject
          --s3-location bucket=myproject-upload-server,bundleType=tgz,key=$GITHUB_SHA.tar.gz